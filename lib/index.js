// Generated by CoffeeScript 1.9.3
(function() {
  var argv, async, copyObjects, db, fs, gfs, git, i, len, mongo, pack, ref, server, tmpdir, yargs,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('shelljs/global');

  yargs = require('yargs');

  async = require('async');

  mongo = require('mongodb');

  gfs = require('gridfs-locking-stream');

  fs = require('fs');

  argv = {};

  git = '';

  db = null;

  yargs.usage('\nUsage: $0 [options]\n').example('', '\nSomething...')["default"]('host', 'localhost').describe('host', 'The domain name or IP address of the mongodb host to connect with')["default"]('port', 3001).describe('port', 'The mongodb server port number to connect with')["default"]('db', 'meteor').describe('db', 'The mongodb database to use')["default"]('gridfs', 'fs').describe('gridfs', 'The name of the gridfs bucket to use')["default"]('git', 'git').describe('git', 'path to the git executable to use').alias('g', 'git').describe('name', 'name of repository in gridfs store')["default"]('name', 'repo').alias('n', 'name').describe('chunksize', 'gridfs chunksize to use when writing to the filestore')["default"]('chunksize', 2 * 1024 * 1024 - 1024).alias('c', 'chunksize').boolean('h').alias('h', 'help').wrap(null).version((function() {
    return require('../package').version;
  }));

  argv = yargs.parse(process.argv);

  console.dir(argv);

  if (argv.h) {
    yargs.showHelp();
    exit(1);
  }

  if (!(git = which(argv.git))) {
    console.error('git command not found');
    exit(1);
  }

  if (indexOf.call(ls('.git'), 'objects') < 0) {
    console.error('Not a valid git repo!');
    exit(1);
  }

  console.log("About to detect packs");

  if (ls('.git/objects/pack/pack-*.pack').length > 0) {
    console.log("Packs detected");
    tmpdir = Math.floor(1000000000000 * Math.random()).toString(36);
    mkdir(tmpdir);
    mv('.git/objects/pack/*', tmpdir + "/");
    ref = ls(tmpdir + "/pack-*.pack");
    for (i = 0, len = ref.length; i < len; i++) {
      pack = ref[i];
      exec("git unpack-objects < " + pack);
    }
    rm('-rf', tmpdir);
  }

  server = new mongo.Server(argv.host, argv.port);

  db = new mongo.Db(argv.db, server, {
    w: 1
  });

  db.open(function(err) {
    var dir, doIt, grid, j, k, len1, len2, obj, objList, ref1, ref2;
    if (err) {
      console.error("Couldn't open database connection, " + err);
    }
    console.log("Connected to mongo!");
    grid = new gfs(db, mongo, argv.gridfs);
    objList = [];
    ref1 = ls('.git/objects/*/');
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      dir = ref1[j];
      if (dir.length === 15) {
        ref2 = ls(dir);
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          obj = ref2[k];
          console.log("Obj: " + dir + "/" + obj);
          objList.push(dir + "/" + obj);
        }
      }
    }
    console.dir(objList);
    doIt = function(obj, cb) {
      console.log("Doin' it for " + argv.name + obj);
      return grid.exist({
        _id: "" + argv.name + obj
      }, function(err, found) {
        if (err || found) {
          return cb(err, found);
        }
        console.log("Copying! " + found);
        return grid.createWriteStream({
          _id: "" + argv.name + obj,
          filename: "" + argv.name + obj,
          content_type: 'application/octet-stream',
          alias: [],
          metadata: {},
          chunkSize: argv.chunksize,
          mode: 'w'
        }, function(err, ws) {
          var rs;
          if (err) {
            return cb(err);
          }
          rs = fs.createReadStream(obj);
          rs.pipe(ws);
          ws.on('error', function(err) {
            return cb(err);
          });
          return ws.on('close', function(file) {
            console.log("Wrote file:");
            console.dir(file);
            return ws.lockReleased(function(err, ld) {
              return cb(null, file);
            });
          });
        });
      });
    };
    return async.eachLimit(objList, 1, doIt, function(err) {
      console.log("Done doing it", err);
      return db.close(function(err) {
        if (err) {
          console.error("Couldn't close database connection, " + err);
        }
        return console.log("Disconnected from mongo!");
      });
    });
  });

  copyObjects = function() {
    return console.log("Copying Objects!");
  };

}).call(this);
